#cloud-config

# sets the hostname
hostname: k8sm

users:
# Adds a user called 'example' with the password hash of 'passwort', sudo rights and the default ubuntu groups
# ubuntu: mkpasswd --method=SHA-512 --rounds=4096
# mac: python3 -c "import crypt; print(crypt.crypt('Ubuntu1!'))"
  - name: ubuntu
    passwd: $6$rounds=4096$P0uvlB9.8nsiY67$uuOxYSk6n/74Ds3JtV1mT6xYjOguwTWgNmOeHvcHiQa9zan57l8dvfHE/zlu19fDmJGySNzLmh6K0R2I1AU9o0
    lock_passwd: false 
    sudo: ALL=(ALL) ALL
    groups: [adm, audio, cdrom, dialout, floppy, video, plugdev, dip, netdev]
  - name: pk
    plain_text_passwd: Ubuntu1!
    lock_passwd: false 
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys: 
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDczEWgpk0DAh87R2UBFsOMQgMb3/LBRNDt5og27fVA2wHtQJQVxdx+6cEqLANUQAfeaXOGli0ghMGXlJRzgR/h8xwCZ7bV4ZC4syp1Imx6aLM9z6bi0T5LXwDVBmMKoDN3wfsHre5KqsdcAS7NiQwc8iGGQDVD4WzAWfLMZR/YZaQ5+e6NIQaSNzjJ/O58jrkNznMGwY9SNee4YUUgeMj7dpdrCJlz4PdXWbjaqQ7TBN8j2hzD10g5KzEQ2PRaz4NM3pbhIFMZJ9jPIpM3en758wQMOdVFlXWPwDqd/G64y1r3uVRCQMi5JHZZl61p32pVrSPwF2MS3Gxpp/cjHAEHovGhX5Rb2cnSk+IioM3j8Jrf/+H0eJ9DzEDwLTRfeqlfzQ2/5rYMHP3c1pnxhbHpVSRbaixxa/XxHR78Eg3Zc4DnvX+wUXqYODooeFzXizH/SaRRrNYk+62dTinB7pMcq0dpNEczOouxNtYsCg3cPKfbeVd22rTGGABO023gbrcR1DQa1R7Nn5seng/NjWHcJVJTuq7BcwcHmTs/5WcBLasdy4kzzw1w4VU9LxBX3XTkO6895muqVYuSNbTRtKoK5jdarhg8Y2GRNIqlE1PLf0oDyEjoLp64vyknRdOXh21aSvuWn94+GfvqIcak9Gkp5mSbf8SXzL7SG1kFhznMwQ== kandasamyp@kandasamyp-a01.vmware.com
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJtJW6mtUAkV6WO2XMHDy10mxIYYrpZSir03+CeaIwyOKIKr5/ro+UkwDysNHEN30TzsF5jW7YGNcEji/3S6Mk5PCzwoMtv/DcpAQ/cCiKUBpXKcqn0LH56+6ifDlijY+nBwojvDSkqRGnU84QuVzbddBmbGk2qGp1R98crltz0q2jxXWehYQ9uvq0plMORwJwIhsUbn/8OCD0aZpfyRkx5pjAyhBIHlUJUX5v+2S9k6wfbfyc9Ov/fmuwTWmXSl3z9MSHMER1wUSA4Ln5ES5ozBFHOXxDHgpXxz0bfCWp8zHWmTZ6eHQCWLktqACLJyM4YIHHIcEUpzXeHLyUhk5H partheeban.kandasamy@gmail.com
    groups: [adm, audio, cdrom, dialout, floppy, video, plugdev, dip, netdev]

# Add primary apt repositories
#
# To add 3rd party repositories, see cloud-config-apt.txt or the
# Additional apt configuration and repositories section.
#
#
# Default: auto select based on cloud metadata
#  in ec2, the default is <region>.archive.ubuntu.com
# apt:
#   primary:
#     - arches [default]
#       uri:
#     use the provided mirror
#       search:
#     search the list for the first mirror.
#     this is currently very limited, only verifying that
#     the mirror is dns resolvable or an IP address
#
# if neither mirror is set (the default)
# then use the mirror provided by the DataSource found.
# In EC2, that means using <region>.ec2.archive.ubuntu.com
#
# if no mirror is provided by the DataSource, but 'search_dns' is
# true, then search for dns names '<distro>-mirror' in each of
# - fqdn of this host per cloud metadata
# - localdomain
# - no domain (which would search domains listed in /etc/resolv.conf)
# If there is a dns entry for <distro>-mirror, then it is assumed that there
# is a distro mirror at http://<distro>-mirror.<domain>/<distro>
#
# That gives the cloud provider the opportunity to set mirrors of a distro
# up and expose them only by creating dns entries.
#
# if none of that is found, then the default distro mirror is used
apt:
  primary:
    - arches: [default]
      uri: http://us.archive.ubuntu.com/ubuntu/

  sources: 
    kubernetes.list:
      source: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
      keyid: 6A030B21BA07F4FB
      keyserver: keyserver.ubuntu.com

# Update apt database on first boot (run 'apt-get update').
# Note, if packages are given, or package_upgrade is true, then
# update will be done independent of this setting.
#
# Default: false
# Aliases: apt_update
package_update: true

# Upgrade the instance on first boot
# (ie run apt-get upgrade)
#
# Default: false
# Aliases: apt_upgrade
package_upgrade: true

# Install additional packages on first boot
#
# Default: none
#
# if packages are specified, this apt_update will be set to true
#
# packages may be supplied as a single package name or as a list
# with the format [<package>, <version>] wherein the specifc
# package version will be installed.
packages:
 - net-tools
 - kubelet
 - kubectl
 - kubeadm
 - docker

# run commands
# default: none
# runcmd contains a list of either lists or a string
# each item will be executed in order at rc.local like level with
# output to the console
# - runcmd only runs during the first boot
# - if the item is a list, the items will be properly executed as if
#   passed to execve(3) (with the first arg as the command).
# - if the item is a string, it will be simply written to the file and
#   will be interpreted by 'sh'
#
# Note, that the list has to be proper yaml, so you have to quote
# any characters yaml would eat (':' can be problematic)
runcmd:
 - [ ls, -l, / ]
 - [ sh, -xc, "echo $(date) ': hello world!'" ]
 - [ sh, -c, echo "=========hello world'=========" ]
 - ls -l /root
 # Note: Don't write files to /tmp from cloud-init use /run/somedir instead.
 # Early boot environments can race systemd-tmpfiles-clean LP: #1707222.
 - mkdir /run/mydir
 - [ wget, "http://slashdot.org", -O, /run/mydir/index.html ]

# final_message
# default: cloud-init boot finished at $TIMESTAMP. Up $UPTIME seconds
# this message is written by cloud-final when the system is finished
# its first boot
final_message: "The system is finally up, after $UPTIME seconds"

 